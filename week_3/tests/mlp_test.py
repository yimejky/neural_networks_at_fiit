import unittest

import numpy as np

from week_3.mlp import MultilayerPerceptron


class TestMultilayerPerceptron(unittest.TestCase):

    def setUp(self):
        self.model = MultilayerPerceptron(2, 10, 5)
        np.random.seed(0)
        self.model.b_1 = np.random.rand(10)
        self.model.w_1 = np.random.rand(10, 2)
        self.model.b_2 = np.random.rand(5)
        self.model.w_2 = np.random.rand(5, 10)

        self.x = np.random.rand(2)
        self.y = np.array([0, 0, 1, 0, 0])

    def test_predict(self):
        for predicted, expected in zip(
            self.model.predict(self.x),
            (
                np.array([0.98851967, 0.97780978, 0.93969556, 0.99396884, 0.90085069]),
                np.array([4.45557348, 3.78566372, 2.74615015, 5.10476691, 2.20671258]),
                np.array([0.7380141 , 0.79417198, 0.66087722, 0.72828043, 0.74751482, 0.7898078, 0.7248143, 0.77868149, 0.81697764, 0.6767565]),
                np.array([1.03567225, 1.35025906, 0.66720584, 0.98591565, 1.08540159, 1.3237673, 0.96846936, 1.25799922, 1.49600339, 0.73890563]),
            )
        ):
            np.testing.assert_array_almost_equal(predicted, expected)

    def test_gradient(self):
        for predicted, expected in zip(
            self.model.gradient(self.x, self.y),
            (
                np.array([
                    [0.00266378, 0.00525197],
                    [0.00318816, 0.00628585],
                    [0.00226502, 0.00446577],
                    [0.0046748, 0.00921695],
                    [0.00246997, 0.00486984],
                    [0.00414067, 0.00816384],
                    [0.0052888, 0.01042752],
                    [0.00343339, 0.00676935],
                    [0.00489607, 0.00965321],
                    [0.00711011, 0.01401846]
                ]),
                np.array([0.01003725, 0.01201313, 0.00853471, 0.01761488, 0.00930695, 0.01560224, 0.01992844, 0.01293718, 0.01844864, 0.02679124]),
                np.array([
                    [0.01655845, 0.01781843, 0.01482777, 0.01634006, 0.01677161, 0.01772052, 0.01626229, 0.01747088, 0.01833011, 0.01518404],
                    [0.0313159, 0.03369883, 0.02804278, 0.03090288, 0.03171904, 0.03351365, 0.0307558, 0.03304153, 0.03466654, 0.02871658],
                    [-0.00504406, -0.00542788, -0.00451686, -0.00497754, -0.005109, -0.00539805, -0.00495385, -0.00532201, -0.00558375, -0.00462539],
                    [0.0087951, 0.00946435, 0.00787584, 0.0086791, 0.00890832, 0.00941234, 0.0086378, 0.00927975, 0.00973613, 0.00806508],
                    [0.11876542, 0.12780266, 0.10635211, 0.11719902, 0.12029433, 0.12710035, 0.11664123, 0.12530984, 0.13147268, 0.1089075]
                ]),
                np.array([0.02243649,  0.04243266, -0.00683464,  0.01191725,  0.16092567]),
            )
        ):
            np.testing.assert_array_almost_equal(predicted, expected)
